name: Ubuntu gcc Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DBUILD_TOOLS=OFF
        -DBUILD_DEMO=OFF
        -DBUILD_TESTS=ON
        -DBUILD_LIB=ON
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror"
        -DCMAKE_BUILD_TYPE=Release
        -DENABLE_COVERAGE=ON
        -DRUN_CLANG_TIDY=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release 

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config Release
    
    #- name: Upload build result
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: build-result
    #    path: |
    #      ${{ steps.strings.outputs.build-output-dir }}/lib/**/*libcli*.dll
    #      ${{ steps.strings.outputs.build-output-dir }}/lib/**/*libcli*.lib
    #      ${{ steps.strings.outputs.build-output-dir }}/lib/**/*libcli*.so
    #      ${{ steps.strings.outputs.build-output-dir }}/lib/**/*libcli*.a
    #      ${{ steps.strings.outputs.build-output-dir }}/lib/**/*libcli*.dylib

    - name: Install gcovr
      run: pip install gcovr

    - name: Run gcovr
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path build\coverage
        gcovr -r . --filter src/ --html-details build/coverage/coverage.html --cobertura -o build/coverage/coverage.xml --exclude '_deps' --gcov-ignore-errors=no_working_dir_found

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/coverage
    
    - name: Run codacy-coverage-reporter
      if: ${{ vars.UPLOAD_COVERAGE == 'true' }}
      uses: codacy/codacy-coverage-reporter-action@v1.3.0
      with:
        project-token: ${{ secrets.CODACY_TOKEN }}
        coverage-reports: build/coverage/coverage.xml

    - name: Upload coverage reports to Codecov
      if: ${{ vars.UPLOAD_COVERAGE == 'true' }}
      uses: codecov/codecov-action@v5
      with:
        files: build/coverage/coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}